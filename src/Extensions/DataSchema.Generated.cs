//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace DataSchema
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class ValveMapping
    {
    
        private string _name;
    
        private int _olfactometer;
    
        private int _valve;
    
        public ValveMapping()
        {
        }
    
        protected ValveMapping(ValveMapping other)
        {
            _name = other._name;
            _olfactometer = other._olfactometer;
            _valve = other._valve;
        }
    
        /// <summary>
        /// The alias of this valve (e.g. OdorA)
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("The alias of this valve (e.g. OdorA)")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// The HARP olfactometer this mapping targets
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="olfactometer")]
        [System.ComponentModel.DescriptionAttribute("The HARP olfactometer this mapping targets")]
        public int Olfactometer
        {
            get
            {
                return _olfactometer;
            }
            set
            {
                _olfactometer = value;
            }
        }
    
        /// <summary>
        /// The physical valve associate with this mapping
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valve")]
        [System.ComponentModel.DescriptionAttribute("The physical valve associate with this mapping")]
        public int Valve
        {
            get
            {
                return _valve;
            }
            set
            {
                _valve = value;
            }
        }
    
        public System.IObservable<ValveMapping> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new ValveMapping(this)));
        }
    
        public System.IObservable<ValveMapping> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new ValveMapping(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("olfactometer = " + _olfactometer + ", ");
            stringBuilder.Append("valve = " + _valve);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class EndValveMapping
    {
    
        private string _name;
    
        private int _olfactometer;
    
        private int _valve;
    
        public EndValveMapping()
        {
        }
    
        protected EndValveMapping(EndValveMapping other)
        {
            _name = other._name;
            _olfactometer = other._olfactometer;
            _valve = other._valve;
        }
    
        /// <summary>
        /// The alias of this valve (e.g. Carrier)
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("The alias of this valve (e.g. Carrier)")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// The HARP olfactometer this mapping targets
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="olfactometer")]
        [System.ComponentModel.DescriptionAttribute("The HARP olfactometer this mapping targets")]
        public int Olfactometer
        {
            get
            {
                return _olfactometer;
            }
            set
            {
                _olfactometer = value;
            }
        }
    
        /// <summary>
        /// The physical valve associate with this mapping
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valve")]
        [System.ComponentModel.DescriptionAttribute("The physical valve associate with this mapping")]
        public int Valve
        {
            get
            {
                return _valve;
            }
            set
            {
                _valve = value;
            }
        }
    
        public System.IObservable<EndValveMapping> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new EndValveMapping(this)));
        }
    
        public System.IObservable<EndValveMapping> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new EndValveMapping(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("olfactometer = " + _olfactometer + ", ");
            stringBuilder.Append("valve = " + _valve);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HypnoseSession
    {
    
        private object _metadata;
    
        private OlfactometerMapping _olfactometerMapping;
    
        public HypnoseSession()
        {
        }
    
        protected HypnoseSession(HypnoseSession other)
        {
            _metadata = other._metadata;
            _olfactometerMapping = other._olfactometerMapping;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public object Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="olfactometerMapping")]
        public OlfactometerMapping OlfactometerMapping
        {
            get
            {
                return _olfactometerMapping;
            }
            set
            {
                _olfactometerMapping = value;
            }
        }
    
        public System.IObservable<HypnoseSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HypnoseSession(this)));
        }
    
        public System.IObservable<HypnoseSession> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HypnoseSession(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("metadata = " + _metadata + ", ");
            stringBuilder.Append("olfactometerMapping = " + _olfactometerMapping);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerMapping
    {
    
        private System.Collections.Generic.List<ValveMapping> _odorValveMap = new System.Collections.Generic.List<ValveMapping>();
    
        private System.Collections.Generic.List<EndValveMapping> _endValveMap = new System.Collections.Generic.List<EndValveMapping>();
    
        public OlfactometerMapping()
        {
        }
    
        protected OlfactometerMapping(OlfactometerMapping other)
        {
            _odorValveMap = other._odorValveMap;
            _endValveMap = other._endValveMap;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="odorValveMap")]
        public System.Collections.Generic.List<ValveMapping> OdorValveMap
        {
            get
            {
                return _odorValveMap;
            }
            set
            {
                _odorValveMap = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="endValveMap")]
        public System.Collections.Generic.List<EndValveMapping> EndValveMap
        {
            get
            {
                return _endValveMap;
            }
            set
            {
                _endValveMap = value;
            }
        }
    
        public System.IObservable<OlfactometerMapping> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerMapping(this)));
        }
    
        public System.IObservable<OlfactometerMapping> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerMapping(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("odorValveMap = " + _odorValveMap + ", ");
            stringBuilder.Append("endValveMap = " + _endValveMap);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<ValveMapping> source)
        {
            return Process<ValveMapping>(source);
        }

        public System.IObservable<string> Process(System.IObservable<EndValveMapping> source)
        {
            return Process<EndValveMapping>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HypnoseSession> source)
        {
            return Process<HypnoseSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerMapping> source)
        {
            return Process<OlfactometerMapping>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<ValveMapping>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<EndValveMapping>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HypnoseSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerMapping>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<HypnoseSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}