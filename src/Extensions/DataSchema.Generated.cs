//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace DataSchema
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerStateCommand
    {
    
        private string _name;
    
        private System.Collections.Generic.List<int> _valvesOpenO0 = new System.Collections.Generic.List<int>();
    
        private System.Collections.Generic.List<int> _valvesOpenO1 = new System.Collections.Generic.List<int>();
    
        private System.Collections.Generic.List<int> _endValvesOpenO0 = new System.Collections.Generic.List<int>();
    
        private System.Collections.Generic.List<int> _endValvesOpenO1 = new System.Collections.Generic.List<int>();
    
        public OlfactometerStateCommand()
        {
        }
    
        protected OlfactometerStateCommand(OlfactometerStateCommand other)
        {
            _name = other._name;
            _valvesOpenO0 = other._valvesOpenO0;
            _valvesOpenO1 = other._valvesOpenO1;
            _endValvesOpenO0 = other._endValvesOpenO0;
            _endValvesOpenO1 = other._endValvesOpenO1;
        }
    
        /// <summary>
        /// The alias of this olfactometer command
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("The alias of this olfactometer command")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valvesOpenO0")]
        public System.Collections.Generic.List<int> ValvesOpenO0
        {
            get
            {
                return _valvesOpenO0;
            }
            set
            {
                _valvesOpenO0 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valvesOpenO1")]
        public System.Collections.Generic.List<int> ValvesOpenO1
        {
            get
            {
                return _valvesOpenO1;
            }
            set
            {
                _valvesOpenO1 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="endValvesOpenO0")]
        public System.Collections.Generic.List<int> EndValvesOpenO0
        {
            get
            {
                return _endValvesOpenO0;
            }
            set
            {
                _endValvesOpenO0 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="endValvesOpenO1")]
        public System.Collections.Generic.List<int> EndValvesOpenO1
        {
            get
            {
                return _endValvesOpenO1;
            }
            set
            {
                _endValvesOpenO1 = value;
            }
        }
    
        public System.IObservable<OlfactometerStateCommand> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerStateCommand(this)));
        }
    
        public System.IObservable<OlfactometerStateCommand> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerStateCommand(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("valvesOpenO0 = " + _valvesOpenO0 + ", ");
            stringBuilder.Append("valvesOpenO1 = " + _valvesOpenO1 + ", ");
            stringBuilder.Append("endValvesOpenO0 = " + _endValvesOpenO0 + ", ");
            stringBuilder.Append("endValvesOpenO1 = " + _endValvesOpenO1);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Valence
    {
    
        private string _command;
    
        private bool _rewarded;
    
        public Valence()
        {
        }
    
        protected Valence(Valence other)
        {
            _command = other._command;
            _rewarded = other._rewarded;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="command")]
        public string Command
        {
            get
            {
                return _command;
            }
            set
            {
                _command = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewarded")]
        public bool Rewarded
        {
            get
            {
                return _rewarded;
            }
            set
            {
                _rewarded = value;
            }
        }
    
        public System.IObservable<Valence> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Valence(this)));
        }
    
        public System.IObservable<Valence> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Valence(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("command = " + _command + ", ");
            stringBuilder.Append("rewarded = " + _rewarded);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Sequence
    {
    
        private string _name;
    
        private string _defaultCommand = "Default";
    
        private double _presentationTime = 1D;
    
        private string _interCommand = "Purge";
    
        private double _interCommandTime = 0.2D;
    
        private double _interTrialInterval = 5D;
    
        private int _repeat = 0;
    
        private System.Collections.Generic.List<System.Collections.Generic.List<Valence>> _rewardCondition1 = new System.Collections.Generic.List<System.Collections.Generic.List<Valence>>();
    
        private System.Collections.Generic.List<System.Collections.Generic.List<Valence>> _rewardCondition2 = new System.Collections.Generic.List<System.Collections.Generic.List<Valence>>();
    
        public Sequence()
        {
        }
    
        protected Sequence(Sequence other)
        {
            _name = other._name;
            _defaultCommand = other._defaultCommand;
            _presentationTime = other._presentationTime;
            _interCommand = other._interCommand;
            _interCommandTime = other._interCommandTime;
            _interTrialInterval = other._interTrialInterval;
            _repeat = other._repeat;
            _rewardCondition1 = other._rewardCondition1;
            _rewardCondition2 = other._rewardCondition2;
        }
    
        /// <summary>
        /// The alias of this sequence
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("The alias of this sequence")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// The default olfactometer command
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="defaultCommand")]
        [System.ComponentModel.DescriptionAttribute("The default olfactometer command")]
        public string DefaultCommand
        {
            get
            {
                return _defaultCommand;
            }
            set
            {
                _defaultCommand = value;
            }
        }
    
        /// <summary>
        /// Presentation time in seconds of each sequence element
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="presentationTime")]
        [System.ComponentModel.DescriptionAttribute("Presentation time in seconds of each sequence element")]
        public double PresentationTime
        {
            get
            {
                return _presentationTime;
            }
            set
            {
                _presentationTime = value;
            }
        }
    
        /// <summary>
        /// Command in between presentations
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="interCommand")]
        [System.ComponentModel.DescriptionAttribute("Command in between presentations")]
        public string InterCommand
        {
            get
            {
                return _interCommand;
            }
            set
            {
                _interCommand = value;
            }
        }
    
        /// <summary>
        /// Time for inter-command in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="interCommandTime")]
        [System.ComponentModel.DescriptionAttribute("Time for inter-command in seconds")]
        public double InterCommandTime
        {
            get
            {
                return _interCommandTime;
            }
            set
            {
                _interCommandTime = value;
            }
        }
    
        /// <summary>
        /// Time between trials in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="interTrialInterval")]
        [System.ComponentModel.DescriptionAttribute("Time between trials in seconds")]
        public double InterTrialInterval
        {
            get
            {
                return _interTrialInterval;
            }
            set
            {
                _interTrialInterval = value;
            }
        }
    
        /// <summary>
        /// Integer specifying the number of repetitions required for a given sequence
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="repeat")]
        [System.ComponentModel.DescriptionAttribute("Integer specifying the number of repetitions required for a given sequence")]
        public int Repeat
        {
            get
            {
                return _repeat;
            }
            set
            {
                _repeat = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardCondition1")]
        public System.Collections.Generic.List<System.Collections.Generic.List<Valence>> RewardCondition1
        {
            get
            {
                return _rewardCondition1;
            }
            set
            {
                _rewardCondition1 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardCondition2")]
        public System.Collections.Generic.List<System.Collections.Generic.List<Valence>> RewardCondition2
        {
            get
            {
                return _rewardCondition2;
            }
            set
            {
                _rewardCondition2 = value;
            }
        }
    
        public System.IObservable<Sequence> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Sequence(this)));
        }
    
        public System.IObservable<Sequence> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Sequence(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("defaultCommand = " + _defaultCommand + ", ");
            stringBuilder.Append("presentationTime = " + _presentationTime + ", ");
            stringBuilder.Append("interCommand = " + _interCommand + ", ");
            stringBuilder.Append("interCommandTime = " + _interCommandTime + ", ");
            stringBuilder.Append("interTrialInterval = " + _interTrialInterval + ", ");
            stringBuilder.Append("repeat = " + _repeat + ", ");
            stringBuilder.Append("rewardCondition1 = " + _rewardCondition1 + ", ");
            stringBuilder.Append("rewardCondition2 = " + _rewardCondition2);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HypnoseSession
    {
    
        private Metadata _metadata;
    
        private System.Collections.Generic.List<OlfactometerStateCommand> _olfactometerCommands = new System.Collections.Generic.List<OlfactometerStateCommand>();
    
        private Sequence _sequence;
    
        public HypnoseSession()
        {
        }
    
        protected HypnoseSession(HypnoseSession other)
        {
            _metadata = other._metadata;
            _olfactometerCommands = other._olfactometerCommands;
            _sequence = other._sequence;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="olfactometerCommands")]
        public System.Collections.Generic.List<OlfactometerStateCommand> OlfactometerCommands
        {
            get
            {
                return _olfactometerCommands;
            }
            set
            {
                _olfactometerCommands = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sequence")]
        public Sequence Sequence
        {
            get
            {
                return _sequence;
            }
            set
            {
                _sequence = value;
            }
        }
    
        public System.IObservable<HypnoseSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HypnoseSession(this)));
        }
    
        public System.IObservable<HypnoseSession> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HypnoseSession(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("metadata = " + _metadata + ", ");
            stringBuilder.Append("olfactometerCommands = " + _olfactometerCommands + ", ");
            stringBuilder.Append("sequence = " + _sequence);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _animalId = "";
    
        private string _rootPath = "";
    
        private double _minimumSampleTime = 0.1D;
    
        public Metadata()
        {
        }
    
        protected Metadata(Metadata other)
        {
            _animalId = other._animalId;
            _rootPath = other._rootPath;
            _minimumSampleTime = other._minimumSampleTime;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animalId")]
        public string AnimalId
        {
            get
            {
                return _animalId;
            }
            set
            {
                _animalId = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rootPath")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        /// <summary>
        /// Minimum amount of time in seconds an animal must sample the poke to initiate a trial
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minimumSampleTime")]
        [System.ComponentModel.DescriptionAttribute("Minimum amount of time in seconds an animal must sample the poke to initiate a tr" +
            "ial")]
        public double MinimumSampleTime
        {
            get
            {
                return _minimumSampleTime;
            }
            set
            {
                _minimumSampleTime = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Metadata(this)));
        }
    
        public System.IObservable<Metadata> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Metadata(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("animalId = " + _animalId + ", ");
            stringBuilder.Append("rootPath = " + _rootPath + ", ");
            stringBuilder.Append("minimumSampleTime = " + _minimumSampleTime);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerStateCommand> source)
        {
            return Process<OlfactometerStateCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valence> source)
        {
            return Process<Valence>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Sequence> source)
        {
            return Process<Sequence>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HypnoseSession> source)
        {
            return Process<HypnoseSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerStateCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valence>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Sequence>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HypnoseSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<HypnoseSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}