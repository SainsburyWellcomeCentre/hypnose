//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v9.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace DataSchema
{
    #pragma warning disable // Disable all warnings

    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardCommand
    {
    
        private double _rewardTime;
    
        private int _rewardPosition;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardTime")]
        public double RewardTime
        {
            get
            {
                return _rewardTime;
            }
            set
            {
                _rewardTime = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardPosition")]
        public int RewardPosition
        {
            get
            {
                return _rewardPosition;
            }
            set
            {
                _rewardPosition = value;
            }
        }
    
        public System.IObservable<RewardCommand> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new RewardCommand
                {
                    RewardTime = _rewardTime,
                    RewardPosition = _rewardPosition
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerStateCommand
    {
    
        private string _name;
    
        private bool _flowEnabledO0 = true;
    
        private bool _flowEnabledO1 = true;
    
        private System.Collections.Generic.List<int> _valvesOpenO0 = new System.Collections.Generic.List<int>();
    
        private System.Collections.Generic.List<int> _valvesOpenO1 = new System.Collections.Generic.List<int>();
    
        private System.Collections.Generic.List<int> _endValvesOpenO0 = new System.Collections.Generic.List<int>();
    
        private System.Collections.Generic.List<int> _endValvesOpenO1 = new System.Collections.Generic.List<int>();
    
        private System.Collections.Generic.List<double> _targetFlowO0 = new System.Collections.Generic.List<double>();
    
        private System.Collections.Generic.List<double> _targetFlowO1 = new System.Collections.Generic.List<double>();
    
        /// <summary>
        /// The alias of this olfactometer command
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("The alias of this olfactometer command")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// Boolean specifying whether to enable airflow across all channels in olfactometer 0
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="flowEnabledO0")]
        [System.ComponentModel.DescriptionAttribute("Boolean specifying whether to enable airflow across all channels in olfactometer " +
            "0")]
        public bool FlowEnabledO0
        {
            get
            {
                return _flowEnabledO0;
            }
            set
            {
                _flowEnabledO0 = value;
            }
        }
    
        /// <summary>
        /// Boolean specifying whether to enable airflow across all channels in olfactometer 1
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="flowEnabledO1")]
        [System.ComponentModel.DescriptionAttribute("Boolean specifying whether to enable airflow across all channels in olfactometer " +
            "1")]
        public bool FlowEnabledO1
        {
            get
            {
                return _flowEnabledO1;
            }
            set
            {
                _flowEnabledO1 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valvesOpenO0")]
        public System.Collections.Generic.List<int> ValvesOpenO0
        {
            get
            {
                return _valvesOpenO0;
            }
            set
            {
                _valvesOpenO0 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valvesOpenO1")]
        public System.Collections.Generic.List<int> ValvesOpenO1
        {
            get
            {
                return _valvesOpenO1;
            }
            set
            {
                _valvesOpenO1 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="endValvesOpenO0")]
        public System.Collections.Generic.List<int> EndValvesOpenO0
        {
            get
            {
                return _endValvesOpenO0;
            }
            set
            {
                _endValvesOpenO0 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="endValvesOpenO1")]
        public System.Collections.Generic.List<int> EndValvesOpenO1
        {
            get
            {
                return _endValvesOpenO1;
            }
            set
            {
                _endValvesOpenO1 = value;
            }
        }
    
        /// <summary>
        /// The target flow rates of the 5 flow channels on olfactometer 0 in ml/min. Range for the odor channels is 0-100ml/min and 0-1000ml/min for the carrier line.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targetFlowO0")]
        [System.ComponentModel.DescriptionAttribute("The target flow rates of the 5 flow channels on olfactometer 0 in ml/min. Range f" +
            "or the odor channels is 0-100ml/min and 0-1000ml/min for the carrier line.")]
        public System.Collections.Generic.List<double> TargetFlowO0
        {
            get
            {
                return _targetFlowO0;
            }
            set
            {
                _targetFlowO0 = value;
            }
        }
    
        /// <summary>
        /// The target flow rates of the 5 flow channels on olfactometer 1 in ml/min. Range for the odor channels is 0-100ml/min and 0-1000ml/min for the carrier line.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targetFlowO1")]
        [System.ComponentModel.DescriptionAttribute("The target flow rates of the 5 flow channels on olfactometer 1 in ml/min. Range f" +
            "or the odor channels is 0-100ml/min and 0-1000ml/min for the carrier line.")]
        public System.Collections.Generic.List<double> TargetFlowO1
        {
            get
            {
                return _targetFlowO1;
            }
            set
            {
                _targetFlowO1 = value;
            }
        }
    
        public System.IObservable<OlfactometerStateCommand> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new OlfactometerStateCommand
                {
                    Name = _name,
                    FlowEnabledO0 = _flowEnabledO0,
                    FlowEnabledO1 = _flowEnabledO1,
                    ValvesOpenO0 = _valvesOpenO0,
                    ValvesOpenO1 = _valvesOpenO1,
                    EndValvesOpenO0 = _endValvesOpenO0,
                    EndValvesOpenO1 = _endValvesOpenO1,
                    TargetFlowO0 = _targetFlowO0,
                    TargetFlowO1 = _targetFlowO1
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Valence
    {
    
        private string _command;
    
        private bool _rewarded;
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="command")]
        public string Command
        {
            get
            {
                return _command;
            }
            set
            {
                _command = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewarded")]
        public bool Rewarded
        {
            get
            {
                return _rewarded;
            }
            set
            {
                _rewarded = value;
            }
        }
    
        public System.IObservable<Valence> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Valence
                {
                    Command = _command,
                    Rewarded = _rewarded
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Sequence
    {
    
        private string _name;
    
        private string _defaultCommand = "Default";
    
        private double _presentationTime = 1D;
    
        private string _interCommand = "Purge";
    
        private double _interCommandTime = 0.2D;
    
        private double _interTrialInterval = 5D;
    
        private int _repeatCount = 1;
    
        private double _responseTime = 5D;
    
        private double _maximumTime = 10D;
    
        private System.Collections.Generic.List<System.Collections.Generic.List<System.Collections.Generic.List<Valence>>> _rewardConditions = new System.Collections.Generic.List<System.Collections.Generic.List<System.Collections.Generic.List<Valence>>>();
    
        private bool _enableTrialIndicator = false;
    
        private bool _enableRewardLocationIndicator = false;
    
        private bool _resetOnReward = false;
    
        /// <summary>
        /// The alias of this sequence
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("The alias of this sequence")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// The default olfactometer command
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="defaultCommand")]
        [System.ComponentModel.DescriptionAttribute("The default olfactometer command")]
        public string DefaultCommand
        {
            get
            {
                return _defaultCommand;
            }
            set
            {
                _defaultCommand = value;
            }
        }
    
        /// <summary>
        /// Presentation time in seconds of each sequence element
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="presentationTime")]
        [System.ComponentModel.DescriptionAttribute("Presentation time in seconds of each sequence element")]
        public double PresentationTime
        {
            get
            {
                return _presentationTime;
            }
            set
            {
                _presentationTime = value;
            }
        }
    
        /// <summary>
        /// Command in between presentations
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="interCommand")]
        [System.ComponentModel.DescriptionAttribute("Command in between presentations")]
        public string InterCommand
        {
            get
            {
                return _interCommand;
            }
            set
            {
                _interCommand = value;
            }
        }
    
        /// <summary>
        /// Time for inter-command in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="interCommandTime")]
        [System.ComponentModel.DescriptionAttribute("Time for inter-command in seconds")]
        public double InterCommandTime
        {
            get
            {
                return _interCommandTime;
            }
            set
            {
                _interCommandTime = value;
            }
        }
    
        /// <summary>
        /// Time between trials in seconds
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="interTrialInterval")]
        [System.ComponentModel.DescriptionAttribute("Time between trials in seconds")]
        public double InterTrialInterval
        {
            get
            {
                return _interTrialInterval;
            }
            set
            {
                _interTrialInterval = value;
            }
        }
    
        /// <summary>
        /// Integer specifying how many times a sequence is allowed to repeat
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="repeatCount")]
        [System.ComponentModel.DescriptionAttribute("Integer specifying how many times a sequence is allowed to repeat")]
        public int RepeatCount
        {
            get
            {
                return _repeatCount;
            }
            set
            {
                _repeatCount = value;
            }
        }
    
        /// <summary>
        /// The allowed time window for a subject to make a response following stimulus presentation
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="responseTime")]
        [System.ComponentModel.DescriptionAttribute("The allowed time window for a subject to make a response following stimulus prese" +
            "ntation")]
        public double ResponseTime
        {
            get
            {
                return _responseTime;
            }
            set
            {
                _responseTime = value;
            }
        }
    
        /// <summary>
        /// The maximum time in seconds that a sequence can last
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maximumTime")]
        [System.ComponentModel.DescriptionAttribute("The maximum time in seconds that a sequence can last")]
        public double MaximumTime
        {
            get
            {
                return _maximumTime;
            }
            set
            {
                _maximumTime = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardConditions")]
        public System.Collections.Generic.List<System.Collections.Generic.List<System.Collections.Generic.List<Valence>>> RewardConditions
        {
            get
            {
                return _rewardConditions;
            }
            set
            {
                _rewardConditions = value;
            }
        }
    
        /// <summary>
        /// Boolean specifying whether to enable indicator for when a trial is ready to be initiated
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="enableTrialIndicator")]
        [System.ComponentModel.DescriptionAttribute("Boolean specifying whether to enable indicator for when a trial is ready to be in" +
            "itiated")]
        public bool EnableTrialIndicator
        {
            get
            {
                return _enableTrialIndicator;
            }
            set
            {
                _enableTrialIndicator = value;
            }
        }
    
        /// <summary>
        /// Boolean specifying whether to enable indicator for where a reward is available
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="enableRewardLocationIndicator")]
        [System.ComponentModel.DescriptionAttribute("Boolean specifying whether to enable indicator for where a reward is available")]
        public bool EnableRewardLocationIndicator
        {
            get
            {
                return _enableRewardLocationIndicator;
            }
            set
            {
                _enableRewardLocationIndicator = value;
            }
        }
    
        /// <summary>
        /// Boolean specifying whether a trial should ignore the response time and reset once a reward is given
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="resetOnReward")]
        [System.ComponentModel.DescriptionAttribute("Boolean specifying whether a trial should ignore the response time and reset once" +
            " a reward is given")]
        public bool ResetOnReward
        {
            get
            {
                return _resetOnReward;
            }
            set
            {
                _resetOnReward = value;
            }
        }
    
        public System.IObservable<Sequence> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Sequence
                {
                    Name = _name,
                    DefaultCommand = _defaultCommand,
                    PresentationTime = _presentationTime,
                    InterCommand = _interCommand,
                    InterCommandTime = _interCommandTime,
                    InterTrialInterval = _interTrialInterval,
                    RepeatCount = _repeatCount,
                    ResponseTime = _responseTime,
                    MaximumTime = _maximumTime,
                    RewardConditions = _rewardConditions,
                    EnableTrialIndicator = _enableTrialIndicator,
                    EnableRewardLocationIndicator = _enableRewardLocationIndicator,
                    ResetOnReward = _resetOnReward
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HypnoseSession
    {
    
        private Metadata _metadata;
    
        private CameraProperties _cameraProperties;
    
        private System.Collections.Generic.List<OlfactometerStateCommand> _olfactometerCommands = new System.Collections.Generic.List<OlfactometerStateCommand>();
    
        private System.Collections.Generic.List<Sequence> _sequences = new System.Collections.Generic.List<Sequence>();
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cameraProperties")]
        public CameraProperties CameraProperties
        {
            get
            {
                return _cameraProperties;
            }
            set
            {
                _cameraProperties = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="olfactometerCommands")]
        public System.Collections.Generic.List<OlfactometerStateCommand> OlfactometerCommands
        {
            get
            {
                return _olfactometerCommands;
            }
            set
            {
                _olfactometerCommands = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sequences")]
        public System.Collections.Generic.List<Sequence> Sequences
        {
            get
            {
                return _sequences;
            }
            set
            {
                _sequences = value;
            }
        }
    
        public System.IObservable<HypnoseSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new HypnoseSession
                {
                    Metadata = _metadata,
                    CameraProperties = _cameraProperties,
                    OlfactometerCommands = _olfactometerCommands,
                    Sequences = _sequences
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _animalId = "";
    
        private string _rootPath = "";
    
        private double _minimumSampleTime = 0.1D;
    
        private double _sampleOffsetTime = 0.1D;
    
        private double _rewardTime = 0.1D;
    
        private string _loggingRootPath = "";
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animalId")]
        public string AnimalId
        {
            get
            {
                return _animalId;
            }
            set
            {
                _animalId = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rootPath")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        /// <summary>
        /// Minimum amount of time in seconds an animal must sample the poke to initiate a trial
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minimumSampleTime")]
        [System.ComponentModel.DescriptionAttribute("Minimum amount of time in seconds an animal must sample the poke to initiate a tr" +
            "ial")]
        public double MinimumSampleTime
        {
            get
            {
                return _minimumSampleTime;
            }
            set
            {
                _minimumSampleTime = value;
            }
        }
    
        /// <summary>
        /// Time in seconds after sampling offset when subject is considered to have disengaged sampling
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sampleOffsetTime")]
        [System.ComponentModel.DescriptionAttribute("Time in seconds after sampling offset when subject is considered to have disengag" +
            "ed sampling")]
        public double SampleOffsetTime
        {
            get
            {
                return _sampleOffsetTime;
            }
            set
            {
                _sampleOffsetTime = value;
            }
        }
    
        /// <summary>
        /// Time in seconds to deliver rewards
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardTime")]
        [System.ComponentModel.DescriptionAttribute("Time in seconds to deliver rewards")]
        public double RewardTime
        {
            get
            {
                return _rewardTime;
            }
            set
            {
                _rewardTime = value;
            }
        }
    
        /// <summary>
        /// The local root folder to save data for this session
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="loggingRootPath")]
        [System.ComponentModel.DescriptionAttribute("The local root folder to save data for this session")]
        public string LoggingRootPath
        {
            get
            {
                return _loggingRootPath;
            }
            set
            {
                _loggingRootPath = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new Metadata
                {
                    AnimalId = _animalId,
                    RootPath = _rootPath,
                    MinimumSampleTime = _minimumSampleTime,
                    SampleOffsetTime = _sampleOffsetTime,
                    RewardTime = _rewardTime,
                    LoggingRootPath = _loggingRootPath
                }));
        }
    }


    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CameraProperties
    {
    
        private double _frameRate = 60D;
    
        private double _exposure = 19000D;
    
        private double _gain = 0D;
    
        /// <summary>
        /// The target camera frame rate in frames per second.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frameRate")]
        [System.ComponentModel.DescriptionAttribute("The target camera frame rate in frames per second.")]
        public double FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// The frame exposure in microseconds.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposure")]
        [System.ComponentModel.DescriptionAttribute("The frame exposure in microseconds.")]
        public double Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        /// <summary>
        /// the gain of the camera sensor.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        [System.ComponentModel.DescriptionAttribute("the gain of the camera sensor.")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        public System.IObservable<CameraProperties> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(
                new CameraProperties
                {
                    FrameRate = _frameRate,
                    Exposure = _exposure,
                    Gain = _gain
                }));
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<RewardCommand> source)
        {
            return Process<RewardCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerStateCommand> source)
        {
            return Process<OlfactometerStateCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Valence> source)
        {
            return Process<Valence>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Sequence> source)
        {
            return Process<Sequence>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HypnoseSession> source)
        {
            return Process<HypnoseSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraProperties> source)
        {
            return Process<CameraProperties>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerStateCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Valence>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Sequence>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HypnoseSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraProperties>))]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<HypnoseSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder().Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}