//----------------------
// <auto-generated>
//     Generated using the NJsonSchema v10.9.0.0 (Newtonsoft.Json v13.0.0.0) (http://NJsonSchema.org)
// </auto-generated>
//----------------------


namespace DataSchema
{
    #pragma warning disable // Disable all warnings

    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class RewardCommand
    {
    
        private double _rewardTime;
    
        private int _rewardPosition;
    
        public RewardCommand()
        {
        }
    
        protected RewardCommand(RewardCommand other)
        {
            _rewardTime = other._rewardTime;
            _rewardPosition = other._rewardPosition;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardTime")]
        public double RewardTime
        {
            get
            {
                return _rewardTime;
            }
            set
            {
                _rewardTime = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardPosition")]
        public int RewardPosition
        {
            get
            {
                return _rewardPosition;
            }
            set
            {
                _rewardPosition = value;
            }
        }
    
        public System.IObservable<RewardCommand> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new RewardCommand(this)));
        }
    
        public System.IObservable<RewardCommand> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new RewardCommand(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("rewardTime = " + _rewardTime + ", ");
            stringBuilder.Append("rewardPosition = " + _rewardPosition);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class OlfactometerStateCommand
    {
    
        private string _name;
    
        private bool _flowEnabledO0 = true;
    
        private bool _flowEnabledO1 = true;
    
        private System.Collections.Generic.List<int> _valvesOpenO0 = new System.Collections.Generic.List<int>();
    
        private System.Collections.Generic.List<int> _valvesOpenO1 = new System.Collections.Generic.List<int>();
    
        private System.Collections.Generic.List<int> _endValvesOpenO0 = new System.Collections.Generic.List<int>();
    
        private System.Collections.Generic.List<int> _endValvesOpenO1 = new System.Collections.Generic.List<int>();
    
        private System.Collections.Generic.List<double> _targetFlowO0 = new System.Collections.Generic.List<double>();
    
        private System.Collections.Generic.List<double> _targetFlowO1 = new System.Collections.Generic.List<double>();
    
        public OlfactometerStateCommand()
        {
        }
    
        protected OlfactometerStateCommand(OlfactometerStateCommand other)
        {
            _name = other._name;
            _flowEnabledO0 = other._flowEnabledO0;
            _flowEnabledO1 = other._flowEnabledO1;
            _valvesOpenO0 = other._valvesOpenO0;
            _valvesOpenO1 = other._valvesOpenO1;
            _endValvesOpenO0 = other._endValvesOpenO0;
            _endValvesOpenO1 = other._endValvesOpenO1;
            _targetFlowO0 = other._targetFlowO0;
            _targetFlowO1 = other._targetFlowO1;
        }
    
        /// <summary>
        /// The alias of this olfactometer command
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="name")]
        [System.ComponentModel.DescriptionAttribute("The alias of this olfactometer command")]
        public string Name
        {
            get
            {
                return _name;
            }
            set
            {
                _name = value;
            }
        }
    
        /// <summary>
        /// Boolean specifying whether to enable airflow across all channels in olfactometer 0
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="flowEnabledO0")]
        [System.ComponentModel.DescriptionAttribute("Boolean specifying whether to enable airflow across all channels in olfactometer " +
            "0")]
        public bool FlowEnabledO0
        {
            get
            {
                return _flowEnabledO0;
            }
            set
            {
                _flowEnabledO0 = value;
            }
        }
    
        /// <summary>
        /// Boolean specifying whether to enable airflow across all channels in olfactometer 1
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="flowEnabledO1")]
        [System.ComponentModel.DescriptionAttribute("Boolean specifying whether to enable airflow across all channels in olfactometer " +
            "1")]
        public bool FlowEnabledO1
        {
            get
            {
                return _flowEnabledO1;
            }
            set
            {
                _flowEnabledO1 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valvesOpenO0")]
        public System.Collections.Generic.List<int> ValvesOpenO0
        {
            get
            {
                return _valvesOpenO0;
            }
            set
            {
                _valvesOpenO0 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="valvesOpenO1")]
        public System.Collections.Generic.List<int> ValvesOpenO1
        {
            get
            {
                return _valvesOpenO1;
            }
            set
            {
                _valvesOpenO1 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="endValvesOpenO0")]
        public System.Collections.Generic.List<int> EndValvesOpenO0
        {
            get
            {
                return _endValvesOpenO0;
            }
            set
            {
                _endValvesOpenO0 = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="endValvesOpenO1")]
        public System.Collections.Generic.List<int> EndValvesOpenO1
        {
            get
            {
                return _endValvesOpenO1;
            }
            set
            {
                _endValvesOpenO1 = value;
            }
        }
    
        /// <summary>
        /// The target flow rates of the 5 flow channels on olfactometer 0 in ml/min. Range for the odor channels is 0-100ml/min and 0-1000ml/min for the carrier line.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targetFlowO0")]
        [System.ComponentModel.DescriptionAttribute("The target flow rates of the 5 flow channels on olfactometer 0 in ml/min. Range f" +
            "or the odor channels is 0-100ml/min and 0-1000ml/min for the carrier line.")]
        public System.Collections.Generic.List<double> TargetFlowO0
        {
            get
            {
                return _targetFlowO0;
            }
            set
            {
                _targetFlowO0 = value;
            }
        }
    
        /// <summary>
        /// The target flow rates of the 5 flow channels on olfactometer 1 in ml/min. Range for the odor channels is 0-100ml/min and 0-1000ml/min for the carrier line.
        /// </summary>
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="targetFlowO1")]
        [System.ComponentModel.DescriptionAttribute("The target flow rates of the 5 flow channels on olfactometer 1 in ml/min. Range f" +
            "or the odor channels is 0-100ml/min and 0-1000ml/min for the carrier line.")]
        public System.Collections.Generic.List<double> TargetFlowO1
        {
            get
            {
                return _targetFlowO1;
            }
            set
            {
                _targetFlowO1 = value;
            }
        }
    
        public System.IObservable<OlfactometerStateCommand> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new OlfactometerStateCommand(this)));
        }
    
        public System.IObservable<OlfactometerStateCommand> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new OlfactometerStateCommand(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("name = " + _name + ", ");
            stringBuilder.Append("flowEnabledO0 = " + _flowEnabledO0 + ", ");
            stringBuilder.Append("flowEnabledO1 = " + _flowEnabledO1 + ", ");
            stringBuilder.Append("valvesOpenO0 = " + _valvesOpenO0 + ", ");
            stringBuilder.Append("valvesOpenO1 = " + _valvesOpenO1 + ", ");
            stringBuilder.Append("endValvesOpenO0 = " + _endValvesOpenO0 + ", ");
            stringBuilder.Append("endValvesOpenO1 = " + _endValvesOpenO1 + ", ");
            stringBuilder.Append("targetFlowO0 = " + _targetFlowO0 + ", ");
            stringBuilder.Append("targetFlowO1 = " + _targetFlowO1);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class HypnoseSession
    {
    
        private Metadata _metadata;
    
        private CameraProperties _cameraProperties;
    
        private System.Collections.Generic.List<OlfactometerStateCommand> _olfactometerCommands = new System.Collections.Generic.List<OlfactometerStateCommand>();
    
        public HypnoseSession()
        {
        }
    
        protected HypnoseSession(HypnoseSession other)
        {
            _metadata = other._metadata;
            _cameraProperties = other._cameraProperties;
            _olfactometerCommands = other._olfactometerCommands;
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="metadata")]
        public Metadata Metadata
        {
            get
            {
                return _metadata;
            }
            set
            {
                _metadata = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="cameraProperties")]
        public CameraProperties CameraProperties
        {
            get
            {
                return _cameraProperties;
            }
            set
            {
                _cameraProperties = value;
            }
        }
    
        [System.Xml.Serialization.XmlIgnoreAttribute()]
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="olfactometerCommands")]
        public System.Collections.Generic.List<OlfactometerStateCommand> OlfactometerCommands
        {
            get
            {
                return _olfactometerCommands;
            }
            set
            {
                _olfactometerCommands = value;
            }
        }
    
        public System.IObservable<HypnoseSession> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new HypnoseSession(this)));
        }
    
        public System.IObservable<HypnoseSession> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new HypnoseSession(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("metadata = " + _metadata + ", ");
            stringBuilder.Append("cameraProperties = " + _cameraProperties + ", ");
            stringBuilder.Append("olfactometerCommands = " + _olfactometerCommands);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class Metadata
    {
    
        private string _animalId = "";
    
        private string _rootPath = "";
    
        private double _minimumSampleTime = 0.1D;
    
        private double _sampleOffsetTime = 0.1D;
    
        private double _maximumInterOdourPokeTime = 0.5D;
    
        private double _rewardTime = 0.1D;
    
        private string _loggingRootPath = "";
    
        private int _performanceAverageWindow = 10;
    
        public Metadata()
        {
        }
    
        protected Metadata(Metadata other)
        {
            _animalId = other._animalId;
            _rootPath = other._rootPath;
            _minimumSampleTime = other._minimumSampleTime;
            _sampleOffsetTime = other._sampleOffsetTime;
            _maximumInterOdourPokeTime = other._maximumInterOdourPokeTime;
            _rewardTime = other._rewardTime;
            _loggingRootPath = other._loggingRootPath;
            _performanceAverageWindow = other._performanceAverageWindow;
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="animalId")]
        public string AnimalId
        {
            get
            {
                return _animalId;
            }
            set
            {
                _animalId = value;
            }
        }
    
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rootPath")]
        public string RootPath
        {
            get
            {
                return _rootPath;
            }
            set
            {
                _rootPath = value;
            }
        }
    
        /// <summary>
        /// Minimum amount of time in seconds a subject must sample the port to initiate a trial.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="minimumSampleTime")]
        [System.ComponentModel.DescriptionAttribute("Minimum amount of time in seconds a subject must sample the port to initiate a tr" +
            "ial.")]
        public double MinimumSampleTime
        {
            get
            {
                return _minimumSampleTime;
            }
            set
            {
                _minimumSampleTime = value;
            }
        }
    
        /// <summary>
        /// Time in seconds after sampling offset when subject is considered to have disengaged sampling.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="sampleOffsetTime")]
        [System.ComponentModel.DescriptionAttribute("Time in seconds after sampling offset when subject is considered to have disengag" +
            "ed sampling.")]
        public double SampleOffsetTime
        {
            get
            {
                return _sampleOffsetTime;
            }
            set
            {
                _sampleOffsetTime = value;
            }
        }
    
        /// <summary>
        /// Maximum time after interCommandTime that subject has to repoke - otherwise trial ends.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="maximumInterOdourPokeTime")]
        [System.ComponentModel.DescriptionAttribute("Maximum time after interCommandTime that subject has to repoke - otherwise trial " +
            "ends.")]
        public double MaximumInterOdourPokeTime
        {
            get
            {
                return _maximumInterOdourPokeTime;
            }
            set
            {
                _maximumInterOdourPokeTime = value;
            }
        }
    
        /// <summary>
        /// Time in seconds to deliver rewards
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="rewardTime")]
        [System.ComponentModel.DescriptionAttribute("Time in seconds to deliver rewards")]
        public double RewardTime
        {
            get
            {
                return _rewardTime;
            }
            set
            {
                _rewardTime = value;
            }
        }
    
        /// <summary>
        /// The local root folder to save data for this session
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="loggingRootPath")]
        [System.ComponentModel.DescriptionAttribute("The local root folder to save data for this session")]
        public string LoggingRootPath
        {
            get
            {
                return _loggingRootPath;
            }
            set
            {
                _loggingRootPath = value;
            }
        }
    
        /// <summary>
        /// Size of the window to calculate performance average over
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="performanceAverageWindow")]
        [System.ComponentModel.DescriptionAttribute("Size of the window to calculate performance average over")]
        public int PerformanceAverageWindow
        {
            get
            {
                return _performanceAverageWindow;
            }
            set
            {
                _performanceAverageWindow = value;
            }
        }
    
        public System.IObservable<Metadata> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new Metadata(this)));
        }
    
        public System.IObservable<Metadata> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new Metadata(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("animalId = " + _animalId + ", ");
            stringBuilder.Append("rootPath = " + _rootPath + ", ");
            stringBuilder.Append("minimumSampleTime = " + _minimumSampleTime + ", ");
            stringBuilder.Append("sampleOffsetTime = " + _sampleOffsetTime + ", ");
            stringBuilder.Append("maximumInterOdourPokeTime = " + _maximumInterOdourPokeTime + ", ");
            stringBuilder.Append("rewardTime = " + _rewardTime + ", ");
            stringBuilder.Append("loggingRootPath = " + _loggingRootPath + ", ");
            stringBuilder.Append("performanceAverageWindow = " + _performanceAverageWindow);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Source)]
    public partial class CameraProperties
    {
    
        private double _frameRate = 60D;
    
        private double _exposure = 19000D;
    
        private double _gain = 0D;
    
        public CameraProperties()
        {
        }
    
        protected CameraProperties(CameraProperties other)
        {
            _frameRate = other._frameRate;
            _exposure = other._exposure;
            _gain = other._gain;
        }
    
        /// <summary>
        /// The target camera frame rate in frames per second.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="frameRate")]
        [System.ComponentModel.DescriptionAttribute("The target camera frame rate in frames per second.")]
        public double FrameRate
        {
            get
            {
                return _frameRate;
            }
            set
            {
                _frameRate = value;
            }
        }
    
        /// <summary>
        /// The frame exposure in microseconds.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="exposure")]
        [System.ComponentModel.DescriptionAttribute("The frame exposure in microseconds.")]
        public double Exposure
        {
            get
            {
                return _exposure;
            }
            set
            {
                _exposure = value;
            }
        }
    
        /// <summary>
        /// the gain of the camera sensor.
        /// </summary>
        [YamlDotNet.Serialization.YamlMemberAttribute(Alias="gain")]
        [System.ComponentModel.DescriptionAttribute("the gain of the camera sensor.")]
        public double Gain
        {
            get
            {
                return _gain;
            }
            set
            {
                _gain = value;
            }
        }
    
        public System.IObservable<CameraProperties> Process()
        {
            return System.Reactive.Linq.Observable.Defer(() => System.Reactive.Linq.Observable.Return(new CameraProperties(this)));
        }
    
        public System.IObservable<CameraProperties> Process<TSource>(System.IObservable<TSource> source)
        {
            return System.Reactive.Linq.Observable.Select(source, _ => new CameraProperties(this));
        }
    
        protected virtual bool PrintMembers(System.Text.StringBuilder stringBuilder)
        {
            stringBuilder.Append("frameRate = " + _frameRate + ", ");
            stringBuilder.Append("exposure = " + _exposure + ", ");
            stringBuilder.Append("gain = " + _gain);
            return true;
        }
    
        public override string ToString()
        {
            System.Text.StringBuilder stringBuilder = new System.Text.StringBuilder();
            stringBuilder.Append(GetType().Name);
            stringBuilder.Append(" { ");
            if (PrintMembers(stringBuilder))
            {
                stringBuilder.Append(" ");
            }
            stringBuilder.Append("}");
            return stringBuilder.ToString();
        }
    }


    /// <summary>
    /// Serializes a sequence of data model objects into YAML strings.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Serializes a sequence of data model objects into YAML strings.")]
    [Bonsai.CombinatorAttribute()]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    public partial class SerializeToYaml
    {
    
        private System.IObservable<string> Process<T>(System.IObservable<T> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.SerializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value => serializer.Serialize(value)); 
            });
        }

        public System.IObservable<string> Process(System.IObservable<RewardCommand> source)
        {
            return Process<RewardCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<OlfactometerStateCommand> source)
        {
            return Process<OlfactometerStateCommand>(source);
        }

        public System.IObservable<string> Process(System.IObservable<HypnoseSession> source)
        {
            return Process<HypnoseSession>(source);
        }

        public System.IObservable<string> Process(System.IObservable<Metadata> source)
        {
            return Process<Metadata>(source);
        }

        public System.IObservable<string> Process(System.IObservable<CameraProperties> source)
        {
            return Process<CameraProperties>(source);
        }
    }


    /// <summary>
    /// Deserializes a sequence of YAML strings into data model objects.
    /// </summary>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("Bonsai.Sgen", "0.2.0.0 (YamlDotNet v13.0.0.0)")]
    [System.ComponentModel.DescriptionAttribute("Deserializes a sequence of YAML strings into data model objects.")]
    [System.ComponentModel.DefaultPropertyAttribute("Type")]
    [Bonsai.WorkflowElementCategoryAttribute(Bonsai.ElementCategory.Transform)]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<RewardCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<OlfactometerStateCommand>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<HypnoseSession>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<Metadata>))]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(Bonsai.Expressions.TypeMapping<CameraProperties>))]
    public partial class DeserializeFromYaml : Bonsai.Expressions.SingleArgumentExpressionBuilder
    {
    
        public DeserializeFromYaml()
        {
            Type = new Bonsai.Expressions.TypeMapping<HypnoseSession>();
        }

        public Bonsai.Expressions.TypeMapping Type { get; set; }

        public override System.Linq.Expressions.Expression Build(System.Collections.Generic.IEnumerable<System.Linq.Expressions.Expression> arguments)
        {
            var typeMapping = (Bonsai.Expressions.TypeMapping)Type;
            var returnType = typeMapping.GetType().GetGenericArguments()[0];
            return System.Linq.Expressions.Expression.Call(
                typeof(DeserializeFromYaml),
                "Process",
                new System.Type[] { returnType },
                System.Linq.Enumerable.Single(arguments));
        }

        private static System.IObservable<T> Process<T>(System.IObservable<string> source)
        {
            return System.Reactive.Linq.Observable.Defer(() =>
            {
                var serializer = new YamlDotNet.Serialization.DeserializerBuilder()
                    .Build();
                return System.Reactive.Linq.Observable.Select(source, value =>
                {
                    var reader = new System.IO.StringReader(value);
                    var parser = new YamlDotNet.Core.MergingParser(new YamlDotNet.Core.Parser(reader));
                    return serializer.Deserialize<T>(parser);
                });
            });
        }
    }
}